(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"/KVv":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return p}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),r=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"encode-and-decode.mdx"}});var b={_frontmatter:o},l=r.a;function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(l,i({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"behind-the-scenes"},"Behind the scenes"),Object(a.b)("p",null,"The Sdkgen uses 2 functions to parse JSON objects received through the API calls into Custom Types defined in .sdkgen files. Those functions are ",Object(a.b)("inlineCode",{parentName:"p"},"encode")," and ",Object(a.b)("inlineCode",{parentName:"p"},"decode")),Object(a.b)("h2",{id:"decode"},"Decode"),Object(a.b)("p",null,"Signature:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{}),"decode(typeTable: TypeTable, path: string, type: TypeDescription, value: any)\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"TypeTable"),": generated table containing all Custom Types in the API."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"path"),": a context for error messages. If the attribute validation fails there will be a message like ",Object(a.b)("inlineCode",{parentName:"li"},"Invalid type at path.attr")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"type"),": name of the Custom Type you want to parse the JSON"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"value"),": the JSON to be convertible")),Object(a.b)("p",null,"Example:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{}),'// Suppose there is a Custom Type named User\nimport { api } from "./generated/api";\nconst obj = {first_name: "Doug", last_name: "Dog", birthDate: "1998-05-31"};\nconst user = decode(api.astJson.typeTable, "user", "User", obj);\nuser.birthDate // Date object on 1998 May 31\n')),Object(a.b)("h2",{id:"encode"},"Encode"),Object(a.b)("p",null,"Signature"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{}),"encode(typeTable: TypeTable, path: string, type: TypeDescription, value: any): any\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"TypeTable"),": generated table containing all Custom Types in the API."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"path"),": a context for error messages. If the attribute validation fails there will be a message like ",Object(a.b)("inlineCode",{parentName:"li"},"Invalid type at path.attr")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"type"),": name of the Custom Type you want to parse the JSON"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"value"),": your Custom Type that should be converted to JSON")),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{}),'// Suppose there is a Custom Type named User\nimport { api } from "./generated/api";\n\napi.fn.processUser = async (ctx, { user }) => {\n    const obj = encode(api.astJson.typeTable, "user", "User", user);\n    obj // JSON object\n};\n')))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"encode-and-decode.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---encode-and-decode-mdx-a5e6eafed96d0e3b3a03.js.map