{"version":3,"sources":["webpack:///../defining-your-schema.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---defining-your-schema-mdx-95ed08307ba1cee92f86.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/sdkgen/sdkgen.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"defining-your-schema\"\n    }}>{`Defining your schema`}</h1>\n    <p>{`To generate client targets and server schema, sdkgen provides an expressive language, in which you declare your interfaces, API calls and error treatment, all of this, with automatic type validation.\nYou can also add annotations to generate documentation and REST endpoints to your exposed functions!`}</p>\n    <h2 {...{\n      \"id\": \"primitive-types\"\n    }}>{`Primitive types`}</h2>\n    <p>{`In addition to having `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`int`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`float`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`bool`}</inlineCode>{` (which are exactly what you expect), it also has: `}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uint`}</inlineCode>{` - an unsigned integer`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uuid`}</inlineCode>{` - a universally unique identifier`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`void`}</inlineCode>{` - the absence of any value`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`date`}</inlineCode>{` - a simple type referencing a date in calendar, timezone-agnostic`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`datetime`}</inlineCode>{` - full date type, with time included, always converted to UTC`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`bytes`}</inlineCode>{` - a byte buffer, commonly used when uploading files`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`money`}</inlineCode>{` - an integer for representing money in cents`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`bigint`}</inlineCode>{` - a way to represent integers bigger than 2^53`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`email`}</inlineCode>{` - an email address valid value`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hex`}</inlineCode>{` - an hexadecimal number`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`base64`}</inlineCode>{` - encoding format for transferring data via text`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`url`}</inlineCode>{` - `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.w3.org/Addressing/URL/url-spec.txt\"\n        }}>{`URL`}</a></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`xml`}</inlineCode>{` - `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.w3.org/TR/xml/\"\n        }}>{`XML`}</a></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`json`}</inlineCode>{` - `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.json.org/json-en.html\"\n        }}>{`JSON`}</a></li>\n    </ul>\n    <p>{`Brazilian utility types:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`cpf`}</inlineCode>{` - personal document number`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`cnpj`}</inlineCode>{` - company document number`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"compound-types\"\n    }}>{`Compound types`}</h2>\n    <p>{`To compose types into more complex ones, sdkgen provides a TypesScript-like syntax:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type UserInfo {\n  firstName: string\n  lastName: string\n  additionalNeeds: string\n  socialName: string\n  cpf: cpf\n  email: string\n  phoneNumber: string\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"spreading-compound-types\"\n    }}>{`Spreading compound types`}</h3>\n    <p>{`Complex types can also be spread and used by other types: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type User {\n    id: uuid\n    ...UserInfo\n}\n`}</code></pre>\n    <p>{`In this case, `}<em parentName=\"p\">{`User`}</em>{` is transformed into:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type User {\n    id: uuid\n    firstName: string\n    lastName: string\n    additionalNeeds: string\n    socialName: string\n    cpf: cpf\n    email: string\n    phoneNumber: string\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enums\"\n    }}>{`Enums`}</h2>\n    <p>{`In sdkgen, enums are types that consist in a fixed set of strings, behaving very similarly to the other languages and being defined this way:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type State enum {\n    Bahia\n    RioDeJaneiro\n    SaoPaulo\n}\n`}</code></pre>\n    <p>{`You can also define enums inline on compound types:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type User {\n    username: string\n    password: string\n    type: enum { Teacher Student Director }\n}\n`}</code></pre>\n    <p>{`When receiving or sending enum-typed strings, the sdkgen server will validate if the value matches the provided set.`}</p>\n    <h2 {...{\n      \"id\": \"lists\"\n    }}>{`Lists`}</h2>\n    <p>{`To define a list of any type, you can just put `}<inlineCode parentName=\"p\">{`[]`}</inlineCode>{` at the of its definition. In this case, foo is a list of strings:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type Game {\n    winner: string\n    players: string[]\n}\n`}</code></pre>\n    <p>{`Your compound type can also be a list:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type Car {\n    brand: string\n    model: string\n    owners: string[]\n}[]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"optional-types\"\n    }}>{`Optional types`}</h2>\n    <p>{`To turn your types optional, add `}<inlineCode parentName=\"p\">{`?`}</inlineCode>{` after its definition. sdkgen won't complain if an optional type is not present in any context.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type BlogPost {\n    title: string\n    description: string?\n    text: string\n}\n`}</code></pre>\n    <p>{`Any sdkgen type can be set as optional:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type Comment {\n    owner: User\n    text: string\n    reactions: Reaction[]?\n}\n\ntype Direction enum {\n    Up\n    Down\n    Left\n    Right\n}\n\ntype Car {\n    brand: string\n    direction: Direction?\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <p>{`To define what your clients will get and put into the server, you should describe the functions, their arguments and return types:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`fn createUser(info: UserInfo): User\nfn updateUser(info: UserInfo): User\n\nfn removeUser(id: string)\n\nfn getUserHistory(id: string, since: date, until: date): History[]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"errors\"\n    }}>{`Errors`}</h2>\n    <p>{`By default, sdkgen provides the `}<inlineCode parentName=\"p\">{`Fatal`}</inlineCode>{` error type, but, you can create your own to make a more specific error throwing to the clients, as you can see:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`error InvalidArgument\nerror NotFound\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"annotations\"\n    }}>{`Annotations`}</h2>\n    <h3 {...{\n      \"id\": \"rest\"\n    }}>{`@rest`}</h3>\n    <p>{`It is possible to add a @rest annotation to any sdkgen function to have it exposed as a REST endpoint. Arguments can be received as path fragments, as query parameters, as headers and on the body. Parsing and strict type validation is all done for you: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Simple get call\n@rest GET /status\nfn getStatus(): string\n\n// Passing argument on body\n@rest POST /users [body {user}]\nfn createNewUser(user: NewUser): User\n\n// Sending custom headers\n@rest GET /posts [header user-agent: {userAgent}] [header accept-language: {lang}] [header x-token: {token}]\nfn getPosts(userAgent: string, lang: string, token: base64): User\n\n// Sending arguments on path and querystring.\n@rest GET /chats/{chatId}/messages?{since}&{until} [header x-token: {token}]\nfn getMessages(token: base64, chatId: uuid, since: datetime?, until: datetime?): Message[]\n\n// Provide the @description to be displayed in the swagger\n@description Get the list of company users\nfn getUsers(companyId: uuid, since: datetime?, until: datetime?, token: base64): User?\n\n// Provide the @args to be displayed a text for argument in the swagger\n@arg companyId ID from company\nfn getUsers(companyId: uuid, since: datetime?, until: datetime?, token: base64): User?\n\n// You can use both at the same time\n@description Get the list of company users\n@arg companyId ID from company\n@arg since provide a date for the start of the search\n@arg until provide a date for the end of the search\n@arg token provide a token in base64\nfn getUsers(companyId: uuid, since: datetime?, until: datetime?, token: base64): User?\n\n// Sending enum like as an argument\ntype TypeTransfer enum {\n    internal\n    external\n}\n\n@rest GET /transfer/account?{type}&{account}\nfn getTransfersTypeFromAccount(type: TypeTransfer, account: string)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}