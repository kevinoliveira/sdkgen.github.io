{"version":3,"sources":["webpack:///../encode-and-decode.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,uMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,yKAAwJ,0BAAYC,WAAW,KAAvB,UAAxJ,QAAmN,0BAAYA,WAAW,KAAvB,WACnN,iBAAQ,CACN,GAAM,UADR,UAGA,mCACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,oFAEL,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,aAApB,6DACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,kGAAwK,0BAAYA,WAAW,MAAvB,8BACxK,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,wDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,SAApB,iCAEF,iCACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,yRAML,iBAAQ,CACN,GAAM,UADR,UAGA,kCACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,yFAEL,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,aAApB,6DACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,kGAAwK,0BAAYA,WAAW,MAAvB,8BACxK,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,wDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,SAApB,wDAEF,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,sP,qMAYTJ,EAAWK,gBAAiB","file":"component---encode-and-decode-mdx-a5e6eafed96d0e3b3a03.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/sdkgen/sdkgen.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"behind-the-scenes\"\n    }}>{`Behind the scenes`}</h1>\n    <p>{`The Sdkgen uses 2 functions to parse JSON objects received through the API calls into Custom Types defined in .sdkgen files. Those functions are `}<inlineCode parentName=\"p\">{`encode`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`decode`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"decode\"\n    }}>{`Decode`}</h2>\n    <p>{`Signature:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`decode(typeTable: TypeTable, path: string, type: TypeDescription, value: any)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`TypeTable`}</inlineCode>{`: generated table containing all Custom Types in the API.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`path`}</inlineCode>{`: a context for error messages. If the attribute validation fails there will be a message like `}<inlineCode parentName=\"li\">{`Invalid type at path.attr`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{`: name of the Custom Type you want to parse the JSON`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`value`}</inlineCode>{`: the JSON to be convertible`}</li>\n    </ul>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Suppose there is a Custom Type named User\nimport { api } from \"./generated/api\";\nconst obj = {first_name: \"Doug\", last_name: \"Dog\", birthDate: \"1998-05-31\"};\nconst user = decode(api.astJson.typeTable, \"user\", \"User\", obj);\nuser.birthDate // Date object on 1998 May 31\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"encode\"\n    }}>{`Encode`}</h2>\n    <p>{`Signature`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`encode(typeTable: TypeTable, path: string, type: TypeDescription, value: any): any\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`TypeTable`}</inlineCode>{`: generated table containing all Custom Types in the API.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`path`}</inlineCode>{`: a context for error messages. If the attribute validation fails there will be a message like `}<inlineCode parentName=\"li\">{`Invalid type at path.attr`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{`: name of the Custom Type you want to parse the JSON`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`value`}</inlineCode>{`: your Custom Type that should be converted to JSON`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`// Suppose there is a Custom Type named User\nimport { api } from \"./generated/api\";\n\napi.fn.processUser = async (ctx, { user }) => {\n    const obj = encode(api.astJson.typeTable, \"user\", \"User\", user);\n    obj // JSON object\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}